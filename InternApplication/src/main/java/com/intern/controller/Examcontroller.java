package com.intern.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import javax.transaction.Transactional;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.text.RandomStringGenerator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


import com.intern.model.QuestionPaper;
import com.intern.model.QuestionSet;
import com.intern.model.Application;
import com.intern.model.Flags;
import com.intern.model.Interview;
import com.intern.model.Leaves;
import com.intern.model.LeavesCompositeKey;
import com.intern.model.Responses;
import com.intern.model.ResponsesCompositeKey;
import com.intern.model.SetMaster;
import com.intern.repository.QuestionRepository;
import com.intern.repository.QuestionSetRepository;
import com.intern.repository.ApplicationRepository;
import com.intern.repository.AttendanceRepository;
import com.intern.repository.DateHolidayRepository;
import com.intern.repository.Flagsrepository;
import com.intern.repository.InterviewRepository;
import com.intern.repository.LeavesRepository;
import com.intern.repository.Responserepository;
import com.intern.repository.SetmasterRepository;
import com.intern.repository.UserRepository;
import com.intern.service.MailService;



@RestController
@RequestMapping("/api/v3")  
public class Examcontroller {
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;
	@Autowired //This means to get the bean called examrepository Which is auto-generated by Spring, we will use it to handle the data
	private QuestionRepository questionRepository;
	
	@Autowired
	private Responserepository responserepository;
	@Autowired
	private Flagsrepository flagsrepository;
	@Autowired
	private LeavesRepository leaveRepository;
	@Autowired
	private ApplicationRepository applicationRepository;
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private AttendanceRepository attendanceRepository;
	@Autowired
	private LeavesRepository leavesRepository;
	@Autowired
	private DateHolidayRepository dateHolidayRepository;
	@Autowired
	private SetmasterRepository setmasterRepository;
	@Autowired
	private QuestionSetRepository questionSetRepository;
	@Autowired
	private InterviewRepository interviewRepository;
	@Autowired
	private MailService mailService;
	
	public String generateRandomSpecialCharacters(int length) {
	    RandomStringGenerator pwdGenerator = new RandomStringGenerator.Builder().withinRange(48, 122)
	        .build();
	    return pwdGenerator.generate(length);
	}
	
	@GetMapping("/topic/cloud")
    public ArrayList<QuestionPaper> getcloudexam(@RequestParam("set") String set) {   //here the parameter in Arraylist has to be a class
		
		try { String s="Cloud";
//		return this.questionRepository.findexamtopicwise(s);//here the parameter in list has to be a class
		long set1=Long.valueOf(set);
				return this.questionRepository.findexamsetwise(s,set1);
		} catch (Exception ex) {
			System.out.println(ex);
			return null;
		}
		}

	
	@GetMapping("/topic/sql")
    public ArrayList<QuestionPaper> getsqlexam(@RequestParam("set") String set) {
		
		try { String s="SQL";
//		return this.questionRepository.findexamtopicwise(s);//here the parameter in list has to be a class
		long set1=Long.valueOf(set);
	
				return this.questionRepository.findexamsetwise(s,set1);
		} catch (Exception ex) {
			System.out.println(ex);
			return null;
		}
		}
	
	
	
	@GetMapping("/checkflag")
    public ArrayList<Flags> checkflag(@RequestParam("id") Long id) {
		System.out.println("In the function");
		try { 
			
			return this.flagsrepository.checkflag(id);//here the parameter in list has to be a class
			
		} catch (Exception ex) {
			System.out.println(ex);
			return null;
		}
		}
	
	
	
	
	
	
	
	@GetMapping("/topic/java")
    public ArrayList<QuestionPaper> getjavaexam(@RequestParam("set") String set) {
		
		try { String s="Java";
		//	return this.questionRepository.findexamtopicwise(s);//here the parameter in list has to be a class
		long set1=Long.valueOf(set);
			return this.questionRepository.findexamsetwise(s,set1);
		} catch (Exception ex) {
			System.out.println(ex);
			return null;
		}
		}
	
	@GetMapping("/topic/python")
    public ArrayList<QuestionPaper> getpythonexam(@RequestParam("set") String set) {
		
		try { String s="Python";
//		return this.questionRepository.findexamtopicwise(s);//here the parameter in list has to be a class
		long set1=Long.valueOf(set);
				return this.questionRepository.findexamsetwise(s,set1);
		} catch (Exception ex) {
			System.out.println(ex);
			return null;
		}
		}
	
	@GetMapping("/topic/android")
    public ArrayList<QuestionPaper> getandroidexam(@RequestParam("set") String set) {
		
		try { String s="Android";
//		return this.questionRepository.findexamtopicwise(s);//here the parameter in list has to be a class
		long set1=Long.valueOf(set);
				return this.questionRepository.findexamsetwise(s,set1);
		} catch (Exception ex) {
			System.out.println(ex);
			return null;
		}
		}
	
	
	@PostMapping("/submit")
	public int submitanswer( @RequestParam("id") int id, @RequestParam("answer") String answer,@RequestParam("uid") long uid) {  //add uid as parameter
		try {
			
			//Responses rp = new Responses(id, answer);
			System.out.println("Within composite key");
			ResponsesCompositeKey rck=new ResponsesCompositeKey(uid,id);
			System.out.println("After composite key");
		
			Optional<Responses> 	 r= this.responserepository.findById(rck);
			 System.out.println("Value of R>" +r);
			if(r.isPresent())
			{
				Responses response =r.get();
				response.setAnswer(answer);
				this.responserepository.save(response);
			}
			else
			{
				this.responserepository.save(new Responses(id,answer,uid));          
			}
			return 1;
			}
		 catch (Exception ex) {
			System.out.println(ex);
			return 0;
		}
	}
	
	
	@GetMapping("/markanswered")
    public ArrayList<Responses> answered( @RequestParam("id") int id,@RequestParam("uid") long uid) {
		
		try { 
			return this.responserepository.findanswered(id,uid);//here the parameter in list has to be a class
			
		} catch (Exception ex) {
			System.out.println(ex);
			return null;
		}
		}
	
	
	@GetMapping("/getsetuser")
    public Long getsetuser( @RequestParam("id") long id) {
		
		try { 
			return this.flagsrepository.findsetofuser(id);//here the parameter in list has to be a class
			
		} catch (Exception ex) {
			System.out.println(ex);
			return null;
		}
		}
	
	@GetMapping("/sets/display/ques")
    public List<SetMaster> setdropdownDisplayQues() {
		
		try { List<SetMaster> setdropdown=this.setmasterRepository.findAllques();
			return setdropdown;
			
		} catch (Exception ex) {
			System.out.println(ex);
			return null;
		}
		}
	
	
	//Integrate Latest
	@PostMapping("/setflagexam")
	
	public Integer setflag( @RequestParam("id") long id) {
		try {
			
		/*	String email = this.userRepository.findById(id).get().getEmail();
		Application a  = this.applicationRepository.findByEmail(email).get(0);
			a.setStatus("ExamOver");
			this.applicationRepository.save(a);
		*/	
			this.flagsrepository.setflag(id);
			Flags f=this.flagsrepository.findById(id).get();
			Long examStratTime=f.getExamdate().getTime();
	
			
			Long currentTime=new Date().getTime();
		

			Long DifferenceInMinute= ((currentTime-examStratTime)/(1000*60));
			Integer differenceInMinuteAsInt=DifferenceInMinute.intValue();
			
			Long setId = f.getSet_id();
			return (this.setmasterRepository.findById(setId).get().getSetTime()-differenceInMinuteAsInt);
			
			}
		 catch (Exception ex) {
			System.out.println(ex);
			return 0;
		}
	}
	
@PostMapping("/saveinterviewmarks")
	@Transactional
	public int saveinterviewmarks( @RequestParam("id") long id,@RequestParam("marks") String marks,@RequestParam("remarks") String remarks, @RequestParam("status")  String status, @RequestParam("currentUser") String currentUser, @RequestParam("entryTime") String entryTime) {
		try {
			Date entryDateTime=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(entryTime);
			this.interviewRepository.save(new Interview(id,marks,remarks,currentUser, entryDateTime));
			Application application = this.applicationRepository.findById(id).get();
			application.setStatus(status);
			this.applicationRepository.save(application);
			return 1;
			}
		 catch (Exception ex) {
			System.out.println(ex);
			return 0;
		}
	}
	

@GetMapping("/getmarksandremarks")
public List<Interview> getmarksandremarks(@RequestParam("id") long id) {
	
	try { ArrayList<Interview> marks=this.interviewRepository.getmarks(id);
	
		return marks;
		
	} catch (Exception ex) {
		System.out.println(ex);
		return null;
	}
	}
@PostMapping("/savequeswithid")
	
	public int submitques( @RequestParam("questionids") Integer questionids, @RequestParam("setid") long setid, @RequestParam("setTime") Integer setTime) {
		try {
			this.questionSetRepository.save(new QuestionSet(questionids,setid));
			SetMaster sm = this.setmasterRepository.findById(setid).get();
			sm.setSetTime(setTime);
			this.setmasterRepository.save(sm);
			return 1;
			}
		 catch (Exception ex) {
			System.out.println(ex);
			return 0;
		}
	}
	

/*
@PostMapping("/savebulkexam")

public int savebulkexam( @RequestParam("userids") long userids, @RequestParam("setid") long setid,@RequestParam String examdate) {
	try {
		long id=Long.valueOf(userids);
		Integer time = this.setmasterRepository.findById(setid).get().getSetTime();
		String userEmail=this.applicationRepository.finduserEmail(id);
		String fullName=this.applicationRepository.finduserFullname(id);
		String contact=this.applicationRepository.finduserContact(id);
		Date examStartDate = new Date(Long.parseLong(examdate));
		mailService.sendNotification2(userEmail, fullName, examStartDate,contact, time);
		
         long userid=this.userRepository.getUserid(id);
		this.flagsrepository.save(new Flags (userid,0,0,0,0,0,0,0,examStartDate,setid,0,0,0,0,0,0, null));
		Application application = this.applicationRepository.findById(id).get();
		application.setStatus("Exam");
		this.applicationRepository.save(application);
		return 1;
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}

*/


@PostMapping("/setinflag")

public int setinflag( @RequestParam("id") long id, @RequestParam("startDate") String startdate,@RequestParam("set") long set, @RequestParam("meetingLink") String meetingLink) {
	try {
		long userid=this.userRepository.getUserid(id);
		
		
		Date examStartDate = new Date(Long.parseLong(startdate));
		
		this.flagsrepository.save(new Flags (userid,0,0,0,0,0,0,0,examStartDate,set,0,0,0,0,0,0, meetingLink));
		
		return 1;
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}



@PostMapping("/resetpass")

public int resetpass(@RequestParam("email") String email) {
	try {String password =email;
	//System.out.println(password);
		String s=passwordEncoder.encode(password);
		//System.out.println(s);	
		this.userRepository.savenewpass(email,s);
		String subject="Your password reset successfully";
		String message="Your new password is " +password;
		mailService.sentApplyNotification(email, subject, message);
		return 1;
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}

@PostMapping("/permitLeave")

public int permitLeave(@RequestParam("email") String email) {
	try {
		ArrayList<com.intern.model.User> uList= userRepository.getusersid(email);
		if(uList!=null)
		{
			String phoneNo=applicationRepository.getContact(email);
			
			System.out.println("Phone No of Partiar Staff "  +phoneNo);
			com.intern.model.User u=uList.get(0);
			u.setLeave_beyond_limit_flag(1);
			this.userRepository.save(u);
			String message="You are now allowed by Admin to Apply more than 7 days leave. Kindly proceed.";
			mailService.sentSMSNotification(phoneNo, message);
			return 1;
			
		}
		else
		{
			return -1;
		}
	}
	catch(Exception ex)
	{
		ex.printStackTrace();
		return 0;
	}
	
}
	
	@GetMapping("/resultcalc")
	
	public ArrayList<Object> resultcalc( @RequestParam("id") long id){
		try { 
			ArrayList<Object> calcresult = this.questionRepository.resultcalc(id);
			return calcresult;
			
		} catch (Exception ex) {
			System.out.println(ex);
			return null;
		}
	}
	
	
@GetMapping("/getprofile")
	
	public ArrayList<Object> getprofile( @RequestParam("email") String email){
		try { 
			ArrayList<Object> getp = this.applicationRepository.getprofile(email);
			return getp;
			
		} catch (Exception ex) {
			System.out.println(ex);
			return null;
		}
	}
	

@PostMapping("/putresult")
	
	public int saveresult( @RequestParam("id") long id,@RequestParam("marks") int marks,@RequestParam("pythonmarks") int pmarks,@RequestParam("androidmarks") int amarks,@RequestParam("sqlmarks") int smarks,@RequestParam("javamarks") int jmarks,@RequestParam("cloudmarks") int cmarks    ,@RequestParam("total_marks") int total_marks,@RequestParam("python_total") int python_total,@RequestParam("android_total") int android_total,@RequestParam("sql_total") int sql_total,@RequestParam("java_total") int java_total,@RequestParam("cloud_total") int cloud_total) {
		try {
			
			this.flagsrepository.saveresult(id,marks,pmarks,cmarks,smarks,jmarks,amarks,total_marks,python_total,cloud_total,sql_total,java_total,android_total);
			//model.addAttribute("result", this.flagsrepository.findById(id));
			com.intern.model.User u = this.userRepository.findById(id).get();
			String userName = u.getFullName();
			String email = u.getEmail(); 
			
			String mailContent = "<html>"
					
								+"<body>"
								
								+"<div>"
								+"Dear" + userName + ",\n\n"
								+"Thank you for taking the test. You scored:-"
								
								+"</div>"
								+"<table style='border:1px solid black; text-align:center;'>"
								+"<thead>"
								+"<tr>"
								+"<th style='border:1px solid black;'>"
								+"Topic"
								+"</th>"
								+"<th style='border:1px solid black;'>"
								+"Obtained"
								+"</th>"
								+"<th style='border:1px solid black;'>"
								+"Out Of"
								+"</th>"
								+"</tr>"
								+"</thead>"
								
								+"<tr>"
								+"<th style='border:1px solid black;'>Android</th>"
								+"<td style='border:1px solid black;'>" + amarks + "</td>"
								+"<td style='border:1px solid black;'>" + android_total + "</td>"
								+"</tr>"
								
								+"<tr>"
								+"<th style='border:1px solid black;'>Cloud</th>"
								+"<td style='border:1px solid black;'>" + cmarks + "</td>"
								+"<td style='border:1px solid black;'>" +cloud_total + "</td>"
								+"</tr>"
								
								+"<tr>"
								+"<th style='border:1px solid black;'>Java</th>"
								+"<td style='border:1px solid black;'>" + jmarks + "</td>"
								+"<td style='border:1px solid black;'>" + java_total + "</td>"
								+"</tr>"
								
								+"<tr>"
								+"<th style='border:1px solid black;'>Python</th>"
								+"<td style='border:1px solid black;'>" + pmarks + "</td>"
								+"<td style='border:1px solid black;'>" + python_total + "</td>"
								+"</tr>"
								
								+"<tr>"
								+"<th style='border:1px solid black;'>SQL</th>"
								+"<td style='border:1px solid black;'>" + smarks + "</td>"
								+"<td style='border:1px solid black;'>" + sql_total + "</td>"
								+"</tr>"
								
								+"<tr>"
								+"<th style='border:1px solid black;'>SQL</th>"
								+"<td style='border:1px solid black;'>" + marks + "</td>"
								+"<td style='border:1px solid black;'>" + total_marks + "</td>"
								+"</tr>"								
								
								+"</table>"
								
								+"<div>"
								+"We'll get back to you soon. \n\nRegards,\nCRIS."
								+"</div>"
								+"</body>"
			
								+ "</html>" ;
			
			this.mailService.sendResultMail(email, mailContent);
			//return "resultPage";
			return 1;
			}
		 catch (Exception ex) {
			System.out.println(ex);
			return 0;
			//return null;
		}
	}





	
@GetMapping("/displayresult")
public ArrayList<Flags> displaymarks( @RequestParam long id) {
	
	try { 
		return this.flagsrepository.findmarks(id);//here the parameter in list has to be a class
		
	} catch (Exception ex) {
		System.out.println(ex);
		return null;
	}
	}











@GetMapping("/getid")
public long getid(@RequestParam("email") String email) {
	
 
	
		return this.applicationRepository.findid(email);
	
	
}

@GetMapping("/checkemail")
public int checkEmailExistence(@RequestParam("emailExist") String email) {
	System.out.println(email);
	System.out.println("Here");
	String emailInLower=email.toLowerCase();
	
	try { 
		Long findemail =this.applicationRepository.findid(emailInLower);
		if(findemail!=null) {
			return 1;
		}
		else {
			return 0;
		}
			
		 
	} catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
	
}
/*public int checkemailid(@RequestParam("emailExist") String email) {
	//System.out.println(email);
	String emailInLower=email.toLowerCase();
	
	try { 
		Long findemail =this.applicationRepository.findid(emailInLower);
		if(findemail!=null) {
			return 1;
		}
		else {
			return 0;
		}
			
		 
	} catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
	
	
	
}*/




@GetMapping("/adminstudentmarks")
public ArrayList<Object> adminstudentmarks( @RequestParam("fromdate") String fromdate, @RequestParam("todate") String todate)  {
	
	try { 	
	Date fromDate = new Date(Long.parseLong(fromdate));
	Date toDate = new Date(Long.parseLong(todate));
		ArrayList<Object> calcresultmarks =this.userRepository.findApplication(fromDate,toDate);
		return calcresultmarks;
		 
	} catch (Exception ex) {
		System.out.println(ex);
		return null;
	}
	}



@GetMapping("/getresultexam")
public ArrayList<Object> getresultexam( @RequestParam("id") long id)  {
	
	try {long userid=this.userRepository.getUserid(id); 	
		
		ArrayList<Object> resultmarks =this.userRepository.findresultuser(userid);
		return resultmarks;
		 
	} catch (Exception ex) {
		System.out.println(ex);
		return null;
	}
	}


@GetMapping("/certislotwise")
public ArrayList<Object> certislotwise( @RequestParam("fromdate") String fromdate, @RequestParam("todate") String todate)  {
	
	try { 	
		
		SimpleDateFormat formatter=new SimpleDateFormat("dd-MM-yyyy");
		Date fromDate=formatter.parse(fromdate);
		Date toDate=formatter.parse(todate);
		
		ArrayList<Object> certi =this.userRepository.findcerti(fromDate,toDate);
		return certi;
		 
	} catch (Exception ex) {
		System.out.println(ex);
		return null;
	}
	}




@GetMapping("/getusersid")
public ArrayList<com.intern.model.User> getusersid(@RequestParam("email") String email) {
	ArrayList<com.intern.model.User> uids= this.userRepository.getusersid(email);
	return uids;
}


@GetMapping("/checktime")
public String checktime(@RequestParam("id") long id) throws ParseException {
	
	/*SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	Date date = sdf.parse(examDate);
	
	
	
	
	long examdate = date.getTime();*/
	Date examDate=this.flagsrepository.getdate(id);
	String examDateAsString = new SimpleDateFormat("dd-MM-yyyy hh:mm").format(examDate);  
	long examdate =examDate.getTime();
	long currentdate = System.currentTimeMillis();
	long deadline =900000+examdate; // here 900000 means 15 minutes(in milliseconds) ie. the candidate can access the exam till 15 minutes after start time
	if(currentdate>=examdate && currentdate<=deadline) {
		return "1";
	}
	else
	{
		return examDateAsString;
	}
	
	}





@PostMapping("/setexamenddate")

public int setexamenddate( @RequestParam("id") long id) {
	try {
		long currentdate = System.currentTimeMillis();
		Date enddate = new Date(currentdate);
		this.flagsrepository.saveexamenddate(id,enddate);
		String email = this.userRepository.findById(id).get().getEmail();
		Application a  = this.applicationRepository.findByEmail(email).get(0);
		a.setStatus("ExamOver");
		this.applicationRepository.save(a);
		return 1;
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}

@PostMapping("/changeProfile")

public int changeProfile( @RequestParam("email") String email,@RequestParam("newemail") String newemail,@RequestParam("address") String address,@RequestParam("phno") String phno) {
	try {
		
		this.applicationRepository.saveprofile(email,newemail,address,phno);
		this.userRepository.saveprofile(email,newemail);
		return 1;
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}

@PostMapping("/checking123")
public  int checking(@RequestParam("h3") String h3) 
{
	 	
	try {
		SimpleDateFormat formatter=new SimpleDateFormat("dd-MM-yyyy");
		Date x1=formatter.parse(h3);
		//java.sql.Date x1=new java.sql.Date(Long.parseLong(h3));
		Long id=this.dateHolidayRepository.findhol(x1);
		if(id!=null) {
			return 1;
		}
		return 0;
		
		
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}

}






@PostMapping("/setexamstartdate")

public int setexamstartdate( @RequestParam("id") long id) {
	try {
		long currentdate = System.currentTimeMillis();
		Date startdate = new Date(currentdate);
		this.flagsrepository.saveexamstartdate(id,startdate);
		return 1;
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}




@PostMapping("/changeExamDate")

public int changeExamDate( @RequestParam("id") long id, @RequestParam("eDate") String edate) {
	try {
		long userid=this.userRepository.getUserid(id);
		
		
		Date examStartDate = new Date(Long.parseLong(edate));
		
		//this.flagsrepository.save(new Flags (userid,0,0,0,0,0,0,0,examStartDate));
		this.flagsrepository.saveNewExamDate(userid,examStartDate);
		return 1;
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}

//IntegrateLatest
@GetMapping("/getIdForExam")
public Integer getIdForExam(@RequestParam("id") long id)  {
	
	try { 
		long userid=this.userRepository.getUserid(id);
		Integer getIdForExam=this.flagsrepository.getIdforExam(userid);
		return getIdForExam;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return 0;
	}
	}

@GetMapping("/attendance/getEmailProjectWise")
public ArrayList<Object> getEmailProjectWise(@RequestParam("project") String project)  {
	
	try { 
		if(project.equals("All")) {
			ArrayList<Object> displayattendance =this.attendanceRepository.findAllEmail();
			return displayattendance;
		}
		else
		{
		ArrayList<Object> displayattendance =this.attendanceRepository.findEmail(project);
		return displayattendance;
		}
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return null;
	}
	}

@GetMapping("/attendance/getEmailMentorWise")
public ArrayList<Object> getEmailMentorWise(@RequestParam("mentorEmail") String mentorEmail)  
{	
	try 
	{ 
		ArrayList<Object> displayattendance =this.attendanceRepository.findEmail2(mentorEmail);
		return displayattendance;	
	} 
	catch (Exception ex) 
	{
		System.out.println(ex); 
		return null;
	}
}

@GetMapping("/attendance/display")
public ArrayList<Object> getDisplay(@RequestParam("email") String email)  {
	
	try { 
		ArrayList<Object> displayattendance =this.attendanceRepository.findApplication(email);
		return displayattendance;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return null;
	}
	}

@GetMapping("/leave/display")
public ArrayList<Object> getLeave(@RequestParam("email") String email)  {
	
	try { 
		ArrayList<Object> displayLeave =this.leaveRepository.findLeaveByEmail(email);
		return displayLeave;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return null;
	}
	}


@GetMapping("/attendance/displayAttendanceDateWise")
public ArrayList<Object> getAttendanceDateWise(@RequestParam("projectName") String projectName, @RequestParam("fromDate") String fromDate,  @RequestParam("toDate") String toDate)  {
	
	try { 
		Date fromDateAsDate=new SimpleDateFormat("dd-MM-yyyy").parse(fromDate); 
		Date toDateAsDate=new SimpleDateFormat("dd-MM-yyyy").parse(toDate);
		ArrayList<Object> displayattendance =this.attendanceRepository.findApplicationByDateAndProject(projectName, fromDateAsDate, toDateAsDate);
		return displayattendance;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return null;
	}
	}

@GetMapping("/attendance/displayAttendanceDateWise2")
public ArrayList<Object> getAttendanceDateWise2(@RequestParam("mentorEmail") String mentorEmail, @RequestParam("fromDate") String fromDate,  @RequestParam("toDate") String toDate)  {
	
	try { 
		Date fromDateAsDate=new SimpleDateFormat("dd-MM-yyyy").parse(fromDate); 
		Date toDateAsDate=new SimpleDateFormat("dd-MM-yyyy").parse(toDate);
		ArrayList<Object> displayattendance =this.attendanceRepository.findApplicationByDateAndProject2(mentorEmail, fromDateAsDate, toDateAsDate);
		return displayattendance;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return null;
	}
	}

@GetMapping("/resultadmin")

public ArrayList<Object> resultadmin(){
	try { 
		ArrayList<Object> calcresultadmin = this.questionRepository.resultadmin();
		return calcresultadmin;
		
	} catch (Exception ex) {
		System.out.println(ex);
		return null;
	}
}



@GetMapping("/resultadminset")

public ArrayList<Object> resultadminset(@RequestParam("id") Long id){
	try { 
		Long sid=this.flagsrepository.findsetofuser(id);
		ArrayList<Object> calcresultadminset = this.questionRepository.resultadminset(sid);
		return calcresultadminset;
		
	} catch (Exception ex) {
		System.out.println(ex);
		return null;
	}
}
/*@PostMapping("/delete")
public ArrayList<Object> delete(@RequestParam("holidaydate") String holidaydate)
{
	try
	{
	
		Date holidaydates = new Date(Long.parseLong(holidaydate));
		ArrayList<Object> dell = this.dateHolidayRepository.del(holidaydates);
		return dell;
	}
	catch (Exception ex) {
		System.out.println(ex);
		return null;
	}
}*/



@PostMapping("/deleteholiday")
public int delete(@RequestParam("id") Long id,@RequestParam("hdate") String hdate)
{
	try
	{
	
		java.sql.Date x1=new java.sql.Date(Long.parseLong(hdate));
		this.dateHolidayRepository.deleteHoli(id,x1);
		return 1;
	}
	catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}





@PostMapping("/leave/mark")
public int markLeave(@RequestParam("id") Long id, @RequestParam("leaveFrom") String leaveFrom, @RequestParam("leaveFromTime") String leaveFromTime, @RequestParam("leaveTo") String leaveTo,@RequestParam("leaveToTime") String leaveToTime,@RequestParam("reason") String reason) 
	{
	try {
		//System.out.println("form value 1"+leaveFrom);
		
		
		SimpleDateFormat formatter=new SimpleDateFormat("dd-MM-yyyy");
		Date leavefrom=formatter.parse(leaveFrom);
		Date leaveto=formatter.parse(leaveTo);
	
		//System.out.println("form value 2"+leavefrom);

		Calendar c1 = Calendar.getInstance();
		c1.setTime(leavefrom);
		Calendar c2 = Calendar.getInstance();
		c2.setTime(leaveto);
		
if(c1.getTimeInMillis()>c2.getTimeInMillis()) {
	
	return 50;
}
LeavesCompositeKey leavesCompositeKey = new LeavesCompositeKey(id, leavefrom);
if (this.leavesRepository.findById(leavesCompositeKey).isPresent()) {
	return 0;
} 	

if(this.leavesRepository.getExistingLeavesBetweenDay(id,leavefrom,leaveto)>0)
{
	System.out.println("Value of Count:> "+this.leavesRepository.getExistingLeavesBetweenDay(id,leavefrom,leaveto));
	return 0;
}
		Float no_of_days_for_leave=0.0F;
	int no_of_days= (int)((leaveto.getTime()-leavefrom.getTime())/ (24*60*60*1000));
	
		 no_of_days=no_of_days+1;
		 no_of_days_for_leave=no_of_days+0.0F;
		if(leaveFromTime.equals("Afternoon"))
		{
			no_of_days_for_leave=no_of_days_for_leave-0.5F;
		}
		if(leaveToTime.equals("Forenoon"))
		{
			no_of_days_for_leave=no_of_days_for_leave-0.5F;
		}
		//System.out.println("no of days"+no_of_days);
		
		int sundays = 0;

		while(c2.after(c1)) 
		{
	
			if(c1.get(Calendar.DAY_OF_WEEK)==Calendar.SUNDAY)
 
				sundays++;
			c1.add(Calendar.DATE,1);
			
			

		}
		
		if(c2.equals(c1))
		{
			//System.out.println("same day");
			if(c1.get(Calendar.DAY_OF_WEEK)==Calendar.SUNDAY)
				 
				sundays++;
		
			
		}
		
	//	System.out.println("sunday value"+ sundays);
		
	
		int no_of_holiday_except_sunday=0;

	    List<Date>  holidayDateList  =this.leavesRepository.getholidayleavebettwodates(leavefrom,leaveto);
	   // System.out.println("list value"+ holidayDateList );
	    List<Date>  holidayDateListAfterLeaveApplied  =this.leavesRepository.getholidayleave(leavefrom);
	    for(Date hol_d : holidayDateList)  
	   {
		 // System.out.println("in loop");
		 // System.out.println(hol_d.toString());
		
		   Calendar c = Calendar.getInstance();

	       c.setTime(hol_d);
	        
	        if(c.get(Calendar.DAY_OF_WEEK)!=Calendar.SUNDAY)
	        {
	        	no_of_holiday_except_sunday++;
	        	
	        }
	    }
	   
	  // System.out.println("no of holidays except sundays"+no_of_holiday_except_sunday);
	   
	   Float c=(no_of_days_for_leave)-(sundays)-(no_of_holiday_except_sunday);
	  
	   
	   Leaves lv = new Leaves(id,"admin","Initiated",reason,c,leavefrom,leaveto,leaveFromTime,leaveToTime,null,null);
	  if(c>7)
	  {
	Integer flag=	userRepository.getLeavePermissionFlag(id);
	System.out.println("Value of Flag:>   "+flag);
	if(flag!=null)
	{
		if(flag==1)
		{
			this.leavesRepository.save(lv);
			com.intern.model.User u=userRepository.findById(id).get();
			u.setLeave_beyond_limit_flag(0);
			Long uid=u.getId();
			Date endDateTraining=u.getEnd_date();
			Double alreadyTakenLeave=leaveRepository.getLeaveCountById(uid);
			if(alreadyTakenLeave+c>12.0)
			{
				Double excessLeave=alreadyTakenLeave+c-12.0;
				Calendar cal = Calendar.getInstance(); 
				cal.setTime(endDateTraining); 
				while(excessLeave>0)
				{

					cal.add(Calendar.DATE, 1);
					if(cal.get(Calendar.DAY_OF_WEEK)==Calendar.SUNDAY)
					{
						cal.add(Calendar.DATE, 1);	
					}
					
					  for(Date hol_d : holidayDateListAfterLeaveApplied)  
					   {
						  Calendar cHoliday = Calendar.getInstance();

						  cHoliday.setTime(hol_d);
					        if(cHoliday.get(Calendar.DAY_OF_WEEK)!=Calendar.SUNDAY)
					        {
					        	if(DateUtils.isSameDay(cHoliday, cal))
					        	{
					        		cal.add(Calendar.DATE, 1);	
					        	}
					        	
					        }
					    }
					  excessLeave=excessLeave-1;
				}
				Date endDateNew=cal.getTime();
				u.setEnd_date(endDateNew);
				this.userRepository.save(u);
				return 2;
			}

			return 3;
		}
		else
		{
			return 4;
		}
	}
	else
	{
		return 4;
	}

	  }
		

	  else
	  {
 if(this.leavesRepository.getLeaveCountById(id)+c >12.0) {
			this.leavesRepository.save(lv);
			Double excessLeave=this.leavesRepository.getLeaveCountById(id)+c-12.0;
			com.intern.model.User u=userRepository.findById(id).get();
			Date endDateTraining=u.getEnd_date();
			Calendar cal = Calendar.getInstance(); 
			cal.setTime(endDateTraining); 
			while(excessLeave>0)
			{
				cal.add(Calendar.DATE, 1);
				if(cal.get(Calendar.DAY_OF_WEEK)==Calendar.SUNDAY)
				{
					cal.add(Calendar.DATE, 1);	
				}
				
				  for(Date hol_d : holidayDateListAfterLeaveApplied)  
				   {
					  Calendar cHoliday = Calendar.getInstance();

					  cHoliday.setTime(hol_d);
				        if(cHoliday.get(Calendar.DAY_OF_WEEK)!=Calendar.SUNDAY)
				        {
				        	if(DateUtils.isSameDay(cHoliday, cal))
				        	{
				        		cal.add(Calendar.DATE, 1);	
				        	}
				        	
				        }
				    }
				  excessLeave=excessLeave-1;
			}
			Date endDateNew=cal.getTime();
			u.setEnd_date(endDateNew);
		
		this.userRepository.save(u);
			mailService.sendWarningNotification2(id);
			return 2;
		}
		else if(this.leavesRepository.getLeaveCountById(id)>12) {
			this.leavesRepository.save(lv);
			Float excessLeave=c;
			com.intern.model.User u=userRepository.findById(id).get();
			Date endDateTraining=u.getEnd_date();
			Calendar cal = Calendar.getInstance(); 
			cal.setTime(endDateTraining); 
			while(excessLeave>0)
			{
				
				
				cal.add(Calendar.DATE, 1);
				if(cal.get(Calendar.DAY_OF_WEEK)==Calendar.SUNDAY)
				{
					cal.add(Calendar.DATE, 1);	
				}
				
				  for(Date hol_d : holidayDateListAfterLeaveApplied)  
				   {
					  Calendar cHoliday = Calendar.getInstance();

					  cHoliday.setTime(hol_d);
				        if(cHoliday.get(Calendar.DAY_OF_WEEK)!=Calendar.SUNDAY)
				        {
				        	if(DateUtils.isSameDay(cHoliday, cal))
				        	{
				        		cal.add(Calendar.DATE, 1);	
				        	}
				        	
				        }
				    }
				  excessLeave=excessLeave-1;
			}
			Date endDateNew=cal.getTime();
			u.setEnd_date(endDateNew);
		
		this.userRepository.save(u);
			
			
			mailService.sendWarningNotification(id);
			return 3;
		}
		
		else{
			this.leavesRepository.save(lv);
			//this.leavesRepository.saveLeave(id,reason,leavefrom,leaveto);
			return 1;
		}
	}
		
	} catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}

@PostMapping("/setmastersave")
public int setmastersave(@RequestParam("setname") String setname, @RequestParam("currentUser") String currentUser, @RequestParam("entryTime") String entryTime) {
	
	
	try {
		
		Date entryDateTime=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(entryTime);
		this.setmasterRepository.save(new SetMaster(setname,currentUser, entryDateTime));
	
		return 1;
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}


@GetMapping("/leaves/display")
public ArrayList<Object> leaveDisplay()  {
	
	try { 
		ArrayList<Object> displayleave =this.leavesRepository.getLeaves();
		return displayleave;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return null;
	}
	}

@GetMapping("/leaves/display2")
public ArrayList<Object> leaveDisplay2(@RequestParam ("mentorEmail") String mentorEmail)  
{
	try 
	{ 
		ArrayList<Object> displayleave =this.leavesRepository.getLeaves2(mentorEmail);
		return displayleave;
	} 
	catch (Exception ex) 
	{
		System.out.println(ex); 
		return null;
	}
}

@GetMapping("/leaves/today")
public ArrayList<Object> leaveDisplayToday()  {
	
	try { 
		ArrayList<Object> displayleave =this.leavesRepository.getInternLeaveOnToday();
		return displayleave;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return null;
	}
	}


@GetMapping("/displayquestionmaster")
public ArrayList<Object> displayquestionmaster()  {
	
	try { 
		ArrayList<Object> result =this.questionRepository.displayquestion();
		return result;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return null;
	}
	}


@GetMapping("/leaves/get")
public ArrayList<Object> leaveget(@RequestParam("email") String email)  {
	
	try { 
		ArrayList<Object> leave =this.leavesRepository.getIndividualLeaves(email);
		return leave;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return null;
	}
	}

@GetMapping("sets/display")
public List<SetMaster> setdropdownDisplay() {
	

	try
	{
		List<SetMaster> setdropdown=this.setmasterRepository.findAll();
		System.out.println(setdropdown.size());
		return setdropdown;
	}
	catch(Exception ex)
	{
		System.out.println(ex);
		return null;
	}
}

@GetMapping("/allsets/get")
public ArrayList<Object> allsets()  {
	
	try { 
		ArrayList<Object> sets =this.setmasterRepository.findallSets();
		
		return sets;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return null;
	}
	}

@GetMapping("/leaves/getAll")
public ArrayList<Object> leavegetAll(@RequestParam("email") String email)  {
	
	try { 
		ArrayList<Object> leave =this.leavesRepository.getAllIndividualLeaves(email);
		return leave;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return null;
	}
	}

@GetMapping("/findCurrentYear")
public int findCurrentYear()  {
	//String s="";
	try { 
		int year = Calendar.getInstance().get(Calendar.YEAR);
		//s=String.valueOf(year);
		return year;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return 0;
	}
	}

@GetMapping("/holidays/getAll")
public ArrayList<Object> holidaysgetAll(@RequestParam("year") String year1)  {
	
	try { int year=Integer.valueOf(year1);
		ArrayList<Object> holiday =this.dateHolidayRepository.getAllHolidays(year);
		return holiday;
		
	} catch (Exception ex) {
		System.out.println(ex); 
		return null;
	}
	}

@PostMapping("/leaves/accept")
public int acceptleave( @RequestParam("id") long id,@RequestParam("fmill") String fmill, @RequestParam("currentUser") String currentUser, @RequestParam("entryTime") String entryTime) {
	
	
	try {
		
		
		Date fromDate = new Date(Long.parseLong(fmill));
		
		Date entryDateTime=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(entryTime);
		
		this.leavesRepository.acceptLeave(id,fromDate, currentUser, entryDateTime);
		return 1;
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}

@PostMapping("/leaves/reject")

public int rejectleave( @RequestParam("id") long id,@RequestParam("fmill") String fmill,@RequestParam("reason") String reason, @RequestParam("currentUser") String currentUser, @RequestParam("entryTime") String entryTime) {
	try {Date fromDate = new Date(Long.parseLong(fmill));
		Date entryDateTime=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(entryTime);
		this.leavesRepository.rejectLeave(id,fromDate,reason, currentUser, entryDateTime);
		return 1;
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}


//@PostMapping("/saveEditedExam")
//
//public int saveEditedExam(@RequestParam("userid") long userId, @RequestParam("setid") long setid, @RequestParam String examdate) {
//	try {
//		long id=Long.valueOf(userId);
////		String userEmail=this.applicationRepository.finduserEmail(id);
////		String fullName=this.applicationRepository.finduserFullname(id);
////		String contact=this.applicationRepository.finduserContact(id);
//		Date examStartDate = new Date(Long.parseLong(examdate));
////		mailService.sendNotification2(userEmail, fullName, examStartDate,contact);
//		
//        long userid = this.userRepository.getUserid(id);
//        System.out.println(userid);
//        if(this.flagsrepository.existsById(userid)) {
//        	System.out.println("Here Again");
//        	Flags flag = this.flagsrepository.findById(userid).get();
//        	flag.setSet_id(setid);
//        	flag.setExamdate(examStartDate);
//        	this.flagsrepository.save(flag);
//        }
//        else {
//        	System.out.println("Not Here Again");
//        	this.flagsrepository.save(new Flags (userid,0,0,0,0,0,0,0,examStartDate,setid,0,0,0,0,0,0));
//        }
//		
//		Application application = this.applicationRepository.findById(id).get();
//		System.out.println(application.getStatus());
//		application.setStatus("Exam");
//		System.out.println(application.getStatus());
//		this.applicationRepository.save(application);
//		return 1;
//		}
//	 catch (Exception ex) {
//		System.out.println(ex);
//		return 0;
//	}
//}

@PostMapping("/saveEditedExam")
public int saveEditedExam(@RequestParam("userid") Long userId, @RequestParam("setid") Long setid, @RequestParam String examdate) {
	System.out.println("In editing exam");
	try {
		Date examStartDate = new Date(Long.parseLong(examdate));
		Application a = null;		
		if(applicationRepository.existsById(userId)){
			a = this.applicationRepository.findById(userId).get();					
		}
		else {
			return 0;
		}
        Long userid = this.userRepository.getUserid(userId);        
        if(Objects.isNull(userid)) {
        	return 0;
        }
        System.out.println(userid);
        if(this.flagsrepository.existsById(userid)) {
        	System.out.println("Flag exists");
        	Flags flag = this.flagsrepository.findById(userid).get();
        	flag.setSet_id(setid);
        	flag.setExamdate(examStartDate);
        	this.flagsrepository.save(flag);
        }
        else {
        	System.out.println("Flag could not be found");
        	return 0;
        }
		System.out.println(a.getStatus());
		a.setStatus("Exam");
		System.out.println(a.getStatus());
		this.applicationRepository.save(a);
		return 1;
	}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}


@PostMapping("/saveEditedExamNew")
public int saveEditedExamNew(@RequestParam("userid") Long userId, @RequestParam("setid") Long setid, @RequestParam String examdate, @RequestParam String userEmail, @RequestParam String fullName, @RequestParam String contact, @RequestParam String meetingLink) {
	System.out.println("In creating exam");
	try {
		Date examStartDate = new Date(Long.parseLong(examdate));
		Application a = null;
		if(applicationRepository.existsById(userId))
		{
			a = this.applicationRepository.findById(userId).get();
					
		}
		else {
			return 0;
		}
		
		Integer time = this.setmasterRepository.findById(setid).get().getSetTime();
		Long idCreated = mailService.sendNotification2(userEmail, fullName, examStartDate, contact, time, meetingLink);
	    this.flagsrepository.save(new Flags (idCreated,0,0,0,0,0,0,0,examStartDate,setid,0,0,0,0,0,0, meetingLink));
		System.out.println(a.getStatus());
		a.setStatus("Exam");
		System.out.println(a.getStatus());
		this.applicationRepository.save(a);
		return 1;
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}


@PostMapping("/saveNoExam")
public int saveNoExam(@RequestParam("userid") long userId) {
	System.out.println("In cancelling exam");
	try {
		long id=Long.valueOf(userId);
        long userid = this.userRepository.getUserid(id);
        System.out.println(userid);
        if(this.flagsrepository.existsById(userid)) {
        	System.out.println("Here Again");
        	Flags flag = this.flagsrepository.findById(userid).get();
        	flagsrepository.delete(flag);
        	userRepository.deleteRoleById(userid);
        	userRepository.deleteById(userid);
        }
        else {
        	System.out.println("No record found");
        }
		Application application = this.applicationRepository.findById(id).get();
		System.out.println(application.getStatus());
		application.setStatus("Approved");
		System.out.println(application.getStatus());
		this.applicationRepository.save(application);
		mailService.sendNoExamMail(application.getEmail(), application.getContact(), application.getFullName());
		return 1;
		}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}

@GetMapping("flags/fetchInFlag")

public Flags fetchinflag( @RequestParam("id") long id) {
	try {
		long userid = this.userRepository.getUserid(id);
        if(this.flagsrepository.existsById(userid)) {
        	Flags flag = this.flagsrepository.findById(userid).get();
        	return flag;
        }
        else {
        	return null;
        }
	}
	 catch (Exception ex) {
		System.out.println(ex);
		return null;
	}
}


@PostMapping("/saveoreditbulkexam")
public int saveoreditbulkexam( @RequestParam String idsNew, @RequestParam String idsOld, @RequestParam String idsOldNewDate, @RequestParam Long setid, @RequestParam String examdate, @RequestParam String meetingLink) {
	
	System.out.println("In function for bulk edits");
	Integer success = 0;
		try {
		Date examStartDate = new Date(Long.parseLong(examdate));
		 Integer time = this.setmasterRepository.findById(setid).get().getSetTime();
		 System.out.println("Code run line 2..");
		 System.out.println("Value of Id:>  "+idsNew);
		 System.out.println("Value of old Id:>  "+idsOld);
		 System.out.println("Value of old new Id:>  "+idsOldNewDate);
		
		 if(!idsNew.equals("none")) {
			String[] newIds = idsNew.split(",");
			for(String i:newIds){  
				
			     System.out.println("APPLICATION ID IS: " + i); 
			     Long id = Long.parseLong(i);
			     Application a = this.applicationRepository.findById(id).get();
			     String userEmail=a.getEmail();
				 String fullName=a.getFullName();
				 String contact=a.getContact();
				
				 Long userId = mailService.sendNotification2(userEmail, fullName, examStartDate,contact, time,meetingLink);   // this method sent mail to user, also create temp user id, password in user table and return userid
				 this.flagsrepository.save(new Flags (userId,0,0,0,0,0,0,0,examStartDate,setid,0,0,0,0,0,0,meetingLink));
				 a.setStatus("Exam");
				 this.applicationRepository.save(a);
				 
			   } 
			success = 1;
		}
		
		if(!idsOldNewDate.equals("none")) {
			String[] newDateIds = idsOldNewDate.split(",");
			for(String i:newDateIds){  
				
			     System.out.println("APPLICATION ID IS: " + i); 
			     Long id = Long.parseLong(i);
			     Application a = this.applicationRepository.findById(id).get();
			     String userEmail=a.getEmail();
				 String fullName=a.getFullName();
				 String contact=a.getContact();
				 
				    Long userId = this.userRepository.getUserid(id);        
			        if(Objects.isNull(userId)) {
			        	Long u = mailService.sendNotification2(userEmail, fullName, examStartDate,contact, time,meetingLink);   // this method sent mail to user, also create temp user id, password in user table and return userid
						 this.flagsrepository.save(new Flags (u,0,0,0,0,0,0,0,examStartDate,setid,0,0,0,0,0,0, meetingLink));
						 a.setStatus("Exam");
						 this.applicationRepository.save(a);
			        	success = 1;
			        }
			        System.out.println(userId);
			        if(this.flagsrepository.existsById(userId)) {
			        	
			        	System.out.println("Flag exists");
			        	Flags flag = this.flagsrepository.findById(userId).get();
			        	flag.setSet_id(setid);
			        	flag.setExamdate(examStartDate);
			        	this.flagsrepository.save(flag);
			        	
			        	this.applicationRepository.findById(id).get().setStatus("Exam");
						System.out.println(a.getStatus());
						a.setStatus("Exam");
						System.out.println(a.getStatus());
						this.applicationRepository.save(a);
						//Integer time = this.setmasterRepository.findById(setid).get().getSetTime();
			        	mailService.sendNotification8(userEmail, fullName, examStartDate, contact, time, meetingLink);
			        	success = 1;
			        }
			        else {
			        	System.out.println("Flag could not be found");
			        	 this.flagsrepository.save(new Flags (userId,0,0,0,0,0,0,0,examStartDate,setid,0,0,0,0,0,0,meetingLink));
			        	 a.setStatus("Exam");
			        	 this.applicationRepository.save(a);
			        	 mailService.sendNotification8(userEmail, fullName, examStartDate, contact, time, meetingLink);
			        	success = 1;
			        }
			   }
			
			if(success != 0) {
				success = 1;
			}
		}
		
		if(!idsOld.equals("none")) {
			String[] oldIds = idsOld.split(",");
			for(String i:oldIds){  
				
			     System.out.println("APPLICATION ID IS: " + i); 
			     Long id = Long.parseLong(i);
			     Application a = this.applicationRepository.findById(id).get();
			     String userEmail=a.getEmail();
				 String fullName=a.getFullName();
				 String contact=a.getContact();
				 
				    Long userId = this.userRepository.getUserid(id);        
			        if(Objects.isNull(userId)) {
			        	Long u = mailService.sendNotification2(userEmail, fullName, examStartDate,contact, time, meetingLink);   // this method sent mail to user, also create temp user id, password in user table and return userid
						 this.flagsrepository.save(new Flags (u,0,0,0,0,0,0,0,examStartDate,setid,0,0,0,0,0,0,meetingLink));
						 a.setStatus("Exam");
						 this.applicationRepository.save(a);
			        	success = 1;
			        }
			        System.out.println(userId);
			        if(this.flagsrepository.existsById(userId)) {
			        	
			        	System.out.println("Flag exists");
			        	Flags flag = this.flagsrepository.findById(userId).get();
			        	flag.setSet_id(setid);
			        	flag.setExamdate(examStartDate);
			        	this.flagsrepository.save(flag);
			        	
			        	this.applicationRepository.findById(id).get().setStatus("Exam");
						System.out.println(a.getStatus());
						a.setStatus("Exam");
						System.out.println(a.getStatus());
						this.applicationRepository.save(a);
						//Integer time = this.setmasterRepository.findById(setid).get().getSetTime();
			        	mailService.sendNotification8(userEmail, fullName, examStartDate, contact, time, meetingLink);
			        	success = 1;
			        }
			        else {
			        	System.out.println("Flag could not be found");
			        	 this.flagsrepository.save(new Flags (userId,0,0,0,0,0,0,0,examStartDate,setid,0,0,0,0,0,0,meetingLink));
			        	 a.setStatus("Exam");
			        	 this.applicationRepository.save(a);
			        	 mailService.sendNotification8(userEmail, fullName, examStartDate, contact, time,meetingLink);
			        	success = 1;
			        }
			   }
			
			if(success != 0) {
				success = 1;
			}
		}
		
		 return success;
	}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
}



@PostMapping("/cancelbulkexam")
public int saveNoExamForBulk(@RequestParam("ids") String ids) {
	System.out.println("In cancelling exam in bulk");

	Integer success = 0;

	try {

		if(ids.equals("none")){
			System.out.println("NONE");
		}
		
		else{			
			ArrayList<String> email = new ArrayList<String>();
			ArrayList<String> name = new ArrayList<String>();
			ArrayList<String> contact = new ArrayList<String>();
			
			String[] newIds = ids.split(",");
			for(String i:newIds){  

				System.out.println("APPLICATION ID IS: " + i); 
				Long id = Long.parseLong(i);
				Application a = this.applicationRepository.findById(id).get();

				Long userId = this.userRepository.getUserid(id);        
				if(!Objects.isNull(userId)) {

					System.out.println(userId);
					if(this.flagsrepository.existsById(userId)) {

						System.out.println("Flag exists");      
						Flags flag = this.flagsrepository.findById(userId).get();
						flagsrepository.delete(flag);
						userRepository.deleteRoleById(userId);
						userRepository.deleteById(userId);
					}
					else {
						System.out.println("No record found");
						success = 0;
					}
					System.out.println(a.getStatus());
					a.setStatus("NoExam");
					System.out.println(a.getStatus());
					this.applicationRepository.save(a);
					
					email.add(a.getEmail());
					name.add(a.getFullName());
					contact.add(a.getContact());
					
					success = 1;
				}
				
				else {
					success = 0;
				}
			}
			
			String []mailArr = new String[email.size()];
			email.toArray(mailArr);
			
			mailService.mailForBulkCancel(mailArr, contact, name);
			}
		return success;
		}
		catch (Exception ex) {
			System.out.println(ex);
			return 0;
		}
	}

@PostMapping("/reExam")
private Integer reExam(@RequestParam Long id, @RequestParam Long setId, @RequestParam String examDate, @RequestParam String meetingLink)
{
	System.out.println("In re-exam");
	try {
		Date examStartDate = new Date(Long.parseLong(examDate));
		Application a = null;		
		String userEmail=null;
		String fullName=null;
		String contact=null;
		Integer time = this.setmasterRepository.findById(setId).get().getSetTime();

		if(applicationRepository.existsById(id)){
			a = this.applicationRepository.findById(id).get();	
		    userEmail=a.getEmail();
			fullName=a.getFullName();
			contact=a.getContact();
		}
		else {
			return 0;
		}
        Long userid = this.userRepository.getUserid(id);        
        if(Objects.isNull(userid)) {
        	System.out.println("Creating new user");
        	
    		Long idCreated = mailService.sendNotification2(userEmail, fullName, examStartDate, contact, time, meetingLink);
    	    this.flagsrepository.save(new Flags (idCreated,0,0,0,0,0,0,0,examStartDate,setId,0,0,0,0,0,0,meetingLink));
    		System.out.println(a.getStatus());
    		a.setStatus("Exam");
    		System.out.println(a.getStatus());
    		this.applicationRepository.save(a);
    		this.responserepository.deleteByUid(userid);
    		return 1;
        }
        
        System.out.println("Existing user");
        System.out.println(userid);
        if(this.flagsrepository.existsById(userid)) {
        	System.out.println("Flag exists");
        	Flags flag = this.flagsrepository.findById(userid).get();
        	flag.setFlag(0);
        	
        	flag.setSet_id(setId);
        	flag.setExamdate(examStartDate);
        	flag.setExam_meeting_link(meetingLink);
        	this.flagsrepository.save(flag);        	
        	this.responserepository.deleteByUid(userid);
        	mailService.sendNotification8(userEmail, fullName, examStartDate, contact, time,meetingLink);
        }
        
        else {
        	System.out.println("Flag could not be found");
        	return 0;
        }
        
		System.out.println(a.getStatus());
		a.setStatus("Exam");
		System.out.println(a.getStatus());
		this.applicationRepository.save(a);
		return 1;
	}
	 catch (Exception ex) {
		System.out.println(ex);
		return 0;
	}
	
}






	
	
}
